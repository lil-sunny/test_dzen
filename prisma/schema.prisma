// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestgraphql {
  provider = "node node_modules/prisma-nestjs-graphql"
  output   = "../src/lib/shared/prismagraphql"
  reExport = Directories
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model User {
  id            Int     @id @default(autoincrement()) @unique
  username      String  @unique
  password      String
  avatar_path   String
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
  posts         Post[]  
  comments      Comment[]
}

model Post {
  id            Int     @id @default(autoincrement()) @unique
  title         String
  description   String  @db.Text
  image_path    String
  author_id     Int
  user        User      @relation(fields: [author_id], references: [id])
  comments      Comment[] 
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}

model Comment {
  id            Int     @id @default(autoincrement()) @unique
  author_id     Int
  post_id       Int
  text          String
  additional_file_path String?
  reply_to_comment_id Int?
  replyTo       Comment?  @relation("CommentReplies", fields: [reply_to_comment_id], references: [id])
  replies       Comment[] @relation("CommentReplies")
  post  Post  @relation(fields: [post_id], references: [id])
  user User @relation(fields: [author_id], references: [id])
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @default(now())
}